<?php function ces(){ print_r('默认首页'); } function curl_get($url){ $curl = curl_init(); curl_setopt($curl, CURLOPT_URL,$url); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5); $data = curl_exec($curl); curl_close($curl); return $data; } function curl_post($url,$post){ $curl = curl_init(); curl_setopt($curl, CURLOPT_URL,$url); curl_setopt($curl, CURLOPT_HEADER, 0); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curl, CURLOPT_POST, 1); $post_data = $post; curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data); $data = curl_exec($curl); curl_close($curl); return $data; } function mfetch($params=array(), $method){ $mh = curl_multi_init(); $handles = array(); foreach($params as $key=>$param){ $ch = curl_init(); $url = $param["url"]; $data = $param["params"]; if(strtolower($method)==="get"){ $url = "$url?" . http_build_query( $data ); }else{ curl_setopt( $ch, CURLOPT_POSTFIELDS, $data ); } curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30); curl_setopt($ch, CURLOPT_TIMEOUT, 30); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER["HTTP_USER_AGENT"]); curl_multi_add_handle($mh, $ch); $handles[$ch] = $key; } $running = null; $curls = array(); do { usleep(10000); curl_multi_exec($mh, $running); while( ( $ret = curl_multi_info_read( $mh ) ) !== false ){ $curls[$handles[$ret["handle"]]] = $ret; } } while ( $running > 0 ); foreach($curls as $key=>&$val){ $val["content"] = curl_multi_getcontent($val["handle"]); curl_multi_remove_handle($mh, $val["handle"]); } curl_multi_close($mh); ksort($curls); return $curls; } function mkdir_file($mkdir_file_name){ $arr_url=explode('/',$mkdir_file_name); $max_i=count($arr_url); $dir=''; for($i=0;$i<$max_i;$i++){ $dir=$dir.$arr_url[$i].'/'; $dirt=trim($dir,'/'); if($i<($max_i-1)){ if(!file_exists($dirt)){ mkdir($dirt); } }else{ $handle=fopen($dirt,"w+"); } } return $handle; } function uplod_file($file_ob,$file_url,$typ=array("image/gif","image/jpeg","image/pjpeg"),$file_size=200000){ if (in_array($file_ob["type"],$typ) && ($file_ob["size"] < $file_size)) { if ($file_ob["error"] > 0) { return array('code'=>0,'data'=>$file_ob["error"]); } else { $cl_u=trim($file_url,'/'); $arr_url=explode('/','upload/'.$cl_u); $max_i=count($arr_url); $dir=''; $dirt=""; for($i=0;$i<$max_i;$i++){ $dir=$dir.$arr_url[$i].'/'; $dirt=trim($dir,'/'); if(!file_exists($dirt)){ mkdir($dirt); } } if(file_exists($dirt)){ $file_name_h=explode('.',$file_ob["name"]); $re_file_url=$dirt.'/'.time().'.'.$file_name_h[1]; if(move_uploaded_file($file_ob["tmp_name"],$re_file_url)){ return array('code'=>1,'data'=>$re_file_url); }else{ return array('code'=>0,'data'=>'文件移动错误'); } }else{ return array('code'=>0,'data'=>'文件路径创建错误'); } } } else { return array('code'=>0,'data'=>'文件过大或者文件格式不支持！'); } } function redconfig($file_url){ $op_file=$file_url; $content_file=fopen($op_file,"r"); $rere=fread($content_file,filesize($op_file)); fclose($content_file); $rearr=explode(',',$rere); $ref=array(); foreach($rearr as $k=>$v){ $ire=explode('=>',$v); @$ref[$ire[0]]=$ire[1]; } return $ref; } function writeconfig($file_url,$arr=array()){ $op_file=$file_url; $wstr=''; foreach($arr as $k=>$v){ foreach(redconfig($op_file) as $kt=>$vt){ if($k==$kt){ return array('cod'=>0,'data'=>$k.'与原有键冲突'); break; } } $wstr=$wstr.','.$k.'=>'.$v; } $content_file=fopen($op_file,"a"); fwrite($content_file,$wstr); fclose($content_file); return array('cod'=>1,'data'=>'新增成功'); } function deleconfig($file_url,$arr=array()){ $op_file=$file_url; $wstrarr=''; $kstr=''; $pd=0; $rec=redconfig($op_file); foreach($arr as $v){ foreach($rec as $kt=>$vt){ if($v==$kt){ unset($rec[$kt]); $kstr=$kstr.','.$kt; $pd=1; } } } foreach($rec as $k=>$v){ $wstrarr=$wstrarr.','.$k.'=>'.$v; } $wstrarr=trim($wstrarr,','); if($pd){ $content_file=fopen($op_file,"w+"); fwrite($content_file,$wstrarr); fclose($content_file); return array('cod'=>1,'data'=>$kstr.'删除成功'); }else{ return array('cod'=>0,'data'=>'没有删除项'); } } function savconfig($file_url,$arr=array()){ $op_file=$file_url; $wstrarr=''; $kstr=''; $pd=0; $rec=redconfig($op_file); foreach($arr as $k=>$v){ foreach($rec as $kt=>$vt){ if((string)$k==$kt){ $rec[$kt]=$v; $kstr=$kstr.','.$kt; $pd=1; } } } foreach($rec as $k=>$v){ $wstrarr=$wstrarr.','.$k.'=>'.$v; } $wstrarr=trim($wstrarr,','); if($pd){ $content_file=fopen($op_file,"w+"); fwrite($content_file,$wstrarr); fclose($content_file); return array('cod'=>1,'data'=>$kstr.'修改成功'); }else{ return array('cod'=>0,'data'=>'没有修改项'); } } function lmpage($sysurl){ $lmpage=redconfig($sysurl)['lmpage']; $lmp_arr=explode('|',$lmpage); $lmp=array(); foreach($lmp_arr as $k=>$v){ if(!empty($v)){ $lap=explode('-',$v); $lmp[$k]['id']=$lap[0]; $lmp[$k]['page']=$lap[1]; } } return $lmp; } function _data_to_tree(&$items, $topid = 0, $with_id = TRUE) { $result = []; foreach($items as $v){ if ($topid == $v['p_id']) { $r = $v + ['children' => _data_to_tree($items, $v['id'], $with_id)]; if ($with_id){ $result[$v['id']] = $r; }else{ $result[] = $r; } } } return $result; } function my_perk($info){ return $info; } function red_dictionary($file_url){ $op_file=$file_url; $content_file=fopen($op_file,"r"); $rere=fread($content_file,filesize($op_file)); fclose($content_file); $rearr=explode("\r\n",$rere); if(count($rearr)>1){ return $rearr; }else{ $rearr=explode("\n",$rere); return $rearr; } } function perk($info,$file_url){ $badword = red_dictionary($file_url); $badword1 = array_combine($badword,array_fill(0,count($badword),'*')); $info=my_perk($info); $htmli=htmlspecialchars($info); $htmli = strtr($htmli, $badword1); return $htmli; } function php_encode($str){ $enstr=''; $encrypt_key = 'ABCDEFGHIJKLMNOQPRST*UVWXYZabcdefghijklmnopqrstuvwxyz1234567890,'; $decrypt_key = 'nTgCzQ7tO,cNoUbmAuhLelBkpIdGaVwPxXfyiWvrDsKjSqH46R8Z0E213Y5*FM9J'; if (strlen($str) == 0) return false; for ($i=0; $i<strlen($str); $i++){ for ($j=0; $j<strlen($encrypt_key); $j++){ if ($str[$i] == $encrypt_key[$j]){ $enstr .= $decrypt_key[$j]; break; } } } return $enstr; } function php_decode($str){ $enstr=''; $encrypt_key = 'ABCDEFGHIJKLMNOQPRST*UVWXYZabcdefghijklmnopqrstuvwxyz1234567890,'; $decrypt_key = 'nTgCzQ7tO,cNoUbmAuhLelBkpIdGaVwPxXfyiWvrDsKjSqH46R8Z0E213Y5*FM9J'; if (strlen($str) == 0) return false; for ($i=0; $i<strlen($str); $i++){ for ($j=0; $j<strlen($decrypt_key); $j++){ if ($str[$i] == $decrypt_key[$j]){ $enstr .= $encrypt_key[$j]; break; } } } return $enstr; } class Model { protected $db = null; private $_db = array(); protected $pk = 'id'; protected $autoinc = false; protected $tablePrefix = null; protected $name = ''; protected $dbName = ''; protected $connection = ''; protected $tableName = ''; protected $error = ''; protected $fields = array(); protected $data = array(); protected $options = array(); protected $prefix = ''; public function __construct() { global $_CONFIG; if (isset($_CONFIG['Mysql']['prefix'])) { $this->prefix = $_CONFIG['Mysql']['prefix']; } try { $dsn = 'mysql:host=' . $_CONFIG['Mysql']['server']. ';dbname=' . $_CONFIG['Mysql']['database_name']; $this->db = new PDO( $dsn, $_CONFIG['Mysql']['username'], $_CONFIG['Mysql']['password'] ); $this->db->exec("SET SQL_MODE=ANSI_QUOTES"); $this->db->exec("SET NAMES '" . $_CONFIG['Mysql']['charset'] . "'"); } catch (PDOException $e) { exit($e->getMessage()); } } public function add($datas=[]) { if (empty($this->options['table'])){ return false; } if (empty($datas)){ return false; } if (!isset($datas[ 0 ])) { $datas = array($datas); } foreach ($datas as $data) { $values = array(); $columns = array(); foreach ($data as $key => $value) { $columns[] = $this->column_quote(preg_replace("/^(\(JSON\)\s*|#)/i", "", $key)); switch (gettype($value)) { case 'NULL': $values[] = 'NULL'; break; case 'array': preg_match("/\(JSON\)\s*([\w]+)/i", $key, $column_match); $values[] = isset($column_match[ 0 ]) ? $this->quote(json_encode($value)) : $this->quote(serialize($value)); break; case 'boolean': $values[] = ($value ? '1' : '0'); break; case 'integer': case 'double': case 'string': $values[] = $this->fn_quote($key, $value); break; } } $this->db->exec('INSERT INTO ' . $this->options['table'] . ' (' . implode(', ', $columns) . ') VALUES (' . implode($values, ', ') . ')'); $lastId[] = $this->db->lastInsertId(); } return count($lastId) > 1 ? $lastId : $lastId[ 0 ]; } public function quote($string) { return $this->db->quote($string); } protected function column_quote($string) { preg_match('/(\(JSON\)\s*|^#)?([a-zA-Z0-9_]*)\.([a-zA-Z0-9_]*)/', $string, $column_match); if (isset($column_match[ 2 ], $column_match[ 3 ])) { return '"' . $this->prefix . $column_match[ 2 ] . '"."' . $column_match[ 3 ] . '"'; } return '"' . $string . '"'; } protected function fn_quote($column, $string) { return (strpos($column, '#') === 0 && preg_match('/^[A-Z0-9\_]*\([^)]*\)$/', $string)) ? $string : $this->quote($string); } public function save($data='') { if (empty($this->options['table'])){ return false ; } if (empty($this->options['where'])){ return false; } $fields = array(); foreach ($data as $key => $value) { preg_match('/([\w]+)(\[(\+|\-|\*|\/)\])?/i', $key, $match); if (isset($match[ 3 ])) { if (is_numeric($value)) { $fields[] = $this->column_quote($match[ 1 ]) . ' = ' . $this->column_quote($match[ 1 ]) . ' ' . $match[ 3 ] . ' ' . $value; } } else { $column = $this->column_quote(preg_replace("/^(\(JSON\)\s*|#)/i", "", $key)); switch (gettype($value)) { case 'NULL': $fields[] = $column . ' = NULL'; break; case 'array': preg_match("/\(JSON\)\s*([\w]+)/i", $key, $column_match); $fields[] = $column . ' = ' . $this->quote( isset($column_match[ 0 ]) ? json_encode($value) : serialize($value) ); break; case 'boolean': $fields[] = $column . ' = ' . ($value ? '1' : '0'); break; case 'integer': case 'double': case 'string': $fields[] = $column . ' = ' . $this->fn_quote($key, $value); break; } } } return $this->db->exec('UPDATE ' . $this->options['table'] . ' SET ' . implode(', ', $fields) . $this->options['where']); } public function delete($options=array()) { if (empty($this->options['table'])){ return false; } if (empty($this->options['where'])){ return false; } return $this->db->exec('DELETE FROM ' . $this->options['table']. $this->options['where']); } protected function select_context() { preg_match('/([a-zA-Z0-9_\-]*)\s*\(([a-zA-Z0-9_\-]*)\)/i', $this->options['table'], $table_match); if (isset($table_match[ 1 ], $table_match[ 2 ])) { $table = $table_match[1]; $table_query = $table_match[1] . ' AS ' . $table_match[ 2 ]; } else { $table = $this->options['table']; $table_query = $table; $this->options['table'] = ''; } if (empty($this->options['field'])){ $field = "*"; }else{ $field = $this->options['field']; $this->options['field'] = ''; } if(empty($this->options['where'])){ $where = ''; }else{ $where = $this->options['where']; $this->options['where'] = ''; } if (!empty($this->options['order'])){ $where .= '  ORDER BY  '. $this->options['order']; $this->options['order'] = ''; } if (!empty($this->options['limit'])){ $where .= '  LIMIT  '.$this->options['limit']; $this->options['limit'] = ''; } return 'SELECT ' . $field . ' FROM ' . $table_query . $where; } public function select() { if (empty($this->options['table'])){ return false; } $row = $this->query($this->select_context())->fetchAll(PDO::FETCH_ASSOC); return $row; } public function count() { if (empty($this->options['table'])){ return false; } $row = $this->select(); return empty($row)?0:count($row); } public function find() { if (empty($this->options['table'])){ return false; } $select_context = $this->select_context()."  LIMIT 1"; $res = $this->db->query($select_context)->fetch(PDO::FETCH_ASSOC); return empty($res)?false:$res; } public function setField($field,$value='') { if(is_array($field)) { $data = $field; }else{ $data[$field] = $value; } return $this->save($data); } public function query($sql) { return $this->db->query($sql); } public function db($linkNum='',$config='',$force=false) { if('' === $linkNum && $this->db) { return $this->db; } if(!isset($this->_db[$linkNum]) || $force ) { if(!empty($config) && is_string($config) && false === strpos($config,'/')) { $config = C($config); } $this->_db[$linkNum] = Db::getInstance($config); }elseif(NULL === $config){ $this->_db[$linkNum]->close(); unset($this->_db[$linkNum]); return ; } $this->db = $this->_db[$linkNum]; $this->_after_db(); if(!empty($this->name) && $this->autoCheckFields) $this->_checkTableInfo(); return $this; } public function info() { $output = array( 'server' => 'SERVER_INFO', 'driver' => 'DRIVER_NAME', 'client' => 'CLIENT_VERSION', 'version' => 'SERVER_VERSION', 'connection' => 'CONNECTION_STATUS' ); foreach ($output as $key => $value) { $output[ $key ] = $this->db->getAttribute(constant('PDO::ATTR_' . $value)); } return $output; } public function getDbFields(){ if(isset($this->options['table'])) { if(is_array($this->options['table'])){ $table = key($this->options['table']); }else{ $table = $this->options['table']; if(strpos($table,')')){ return false; } } $fields = $this->db->getFields($table); return $fields ? array_keys($fields) : false; } if($this->fields) { $fields = $this->fields; unset($fields['_type'],$fields['_pk']); return $fields; } return false; } public function order($order) { $this->options['order'] = empty($order)? '':$order; return $this; } public function table($table) { $prefix = $this->prefix; if(is_array($table)) { $this->options['table'] = $table; }elseif(!empty($table)) { $table = $prefix.$table; $this->options['table'] = $table; } return $this; } public function join($join,$type='INNER') { $prefix = $this->tablePrefix; if(is_array($join)) { foreach ($join as $key=>&$_join){ $_join = preg_replace_callback("/__([A-Z0-9_-]+)__/sU", function($match) use($prefix){ return $prefix.strtolower($match[1]);}, $_join); $_join = false !== stripos($_join,'JOIN')? $_join : $type.' JOIN ' .$_join; } $this->options['join'] = $join; }elseif(!empty($join)) { $join = preg_replace_callback("/__([A-Z0-9_-]+)__/sU", function($match) use($prefix){ return $prefix.strtolower($match[1]);}, $join); $this->options['join'][] = false !== stripos($join,'JOIN')? $join : $type.' JOIN '.$join; } return $this; } public function field($field){ if (!is_array($field)){ return false; } $field = !empty($field)?implode(',',$field):'*'; $this->options['field'] = $field; return $this; } public function where($where =[]){ if (empty($where)){ $this->options['where'] = ''; } $where_clause = ''; if (is_array($where)) { $where_keys = array_keys($where); $where_AND = preg_grep("/^AND\s*#?$/i", $where_keys); $where_OR = preg_grep("/^OR\s*#?$/i", $where_keys); $single_condition = array_diff_key($where, array_flip( array('AND', 'OR') )); if ($single_condition != array()) { $condition = $this->data_implode($single_condition, ''); if ($condition != '') { $where_clause = ' WHERE ' . $condition; } } if (!empty($where_AND)) { $value = array_values($where_AND); $where_clause = ' WHERE ' . $this->data_implode($where[ $value[ 0 ] ], ' AND'); } if (!empty($where_OR)) { $value = array_values($where_OR); $where_clause = ' WHERE ' . $this->data_implode($where[ $value[ 0 ] ], ' OR'); } } else { if ($where != null) { $where_clause .= ' ' . $where; } } $this->options['where'] = $where_clause; return $this; } protected function data_implode($data, $conjunctor) { $wheres = array(); foreach ($data as $key => $value) { $type = gettype($value); preg_match('/(#?)([\w\.\-]+)(\[(\>|\>\=|\<|\%|\<\=|\!|\<\>|\>\<|\!?~)\])?/i', $key, $match); $column = $this->column_quote($match[ 2 ]); if (isset($match[ 4 ])) { $operator = $match[ 4 ]; if ($operator == '!') { switch ($type) { case 'NULL': $wheres[] = $column . ' IS NOT NULL'; break; case 'array': $wheres[] = $column . ' NOT IN (' . $this->array_quote($value) . ')'; break; case 'integer': case 'double': $wheres[] = $column . ' != ' . $value; break; case 'boolean': $wheres[] = $column . ' != ' . ($value ? '1' : '0'); break; case 'string': $wheres[] = $column . ' != ' . $this->fn_quote($key, $value); break; } } if ($operator == '<>' || $operator == '><') { if ($type == 'array') { if ($operator == '><') { $column .= ' NOT'; } if (is_numeric($value[ 0 ]) && is_numeric($value[ 1 ])) { $wheres[] = '(' . $column . ' BETWEEN ' . $value[ 0 ] . ' AND ' . $value[ 1 ] . ')'; } else { $wheres[] = '(' . $column . ' BETWEEN ' . $this->quote($value[ 0 ]) . ' AND ' . $this->quote($value[ 1 ]) . ')'; } } } if ($operator == '~' || $operator == '!~'||$operator == '%') { if ($type != 'array') { $value = array($value); } $like_clauses = array(); foreach ($value as $item) { $item = strval($item); if (preg_match('/^(?!(%|\[|_])).+(?<!(%|\]|_))$/', $item)) { $item = ($operator === '%' ? '' : '%') . $item . '%'; } $like_clauses[] = $column . ($operator === '!~' ? ' NOT' : '') . ' LIKE ' . $this->fn_quote($key, $item); } $wheres[] = implode(' OR ', $like_clauses); } if (in_array($operator, array('>', '>=', '<', '<='))) { $condition = $column . ' ' . $operator . ' '; if (is_numeric($value)) { $condition .= $value; } elseif (strpos($key, '#') === 0) { $condition .= $this->fn_quote($key, $value); } else { $condition .= $this->quote($value); } $wheres[] = $condition; } } else { switch ($type) { case 'NULL': $wheres[] = $column . ' IS NULL'; break; case 'array': $wheres[] = $column . ' IN (' . $this->array_quote($value) . ')'; break; case 'integer': case 'double': $wheres[] = $column . ' = ' . $value; break; case 'boolean': $wheres[] = $column . ' = ' . ($value ? '1' : '0'); break; case 'string': $wheres[] = $column . ' = ' . $this->fn_quote($key, $value); break; } } } return implode($conjunctor . ' ', $wheres); } protected function array_quote($array) { $temp = array(); foreach ($array as $value) { $temp[] = is_int($value) ? $value : $this->db->quote($value); } return implode($temp, ','); } public function limit($offset,$length=null){ if(is_null($length) && strpos($offset,',')){ list($offset,$length) = explode(',',$offset); } $this->options['limit'] = intval($offset).( $length? ','.intval($length) : '' ); return $this; } public function page($page,$listRows=null){ if(is_null($listRows) && strpos($page,',')){ list($page,$listRows) = explode(',',$page); } $this->options['page'] = array(intval($page),intval($listRows)); return $this; } public function put_port($data){ return $this->column_quote($data); } protected function column_quote_f($string) { return $string; } public function parameter_kid($warr=[],$style='',$mode='',$limt='',$order=''){ empty($style)?$style='AND':$style=$style; empty($mode)?$mode='<':$mode=$mode; empty($limt)?$limt=10:$limt=$limt; $where=''; $where1=''; $vts=''; foreach($warr as $k=>$v){ if(!is_array($v)){ $farr=explode(",",$v); if(count($farr)>1){ $where=$where.$k.''.$farr[0].':'.$k.' '.$style.' '; }else{ $where=$where.$k.''.$mode.':'.$k.' '.$style.' '; } }else{ if(!empty($v['data'])){ $varr=explode(",",$v['data']); foreach($varr as $ky=>$vy){ $where1=$where1.$k.' LIKE :'.$k.'_'.$ky.' '.$v['st'].' '; $vts=$v['st']; } }else{echo '条件不能为空';exit;} } } $where1='('.rtrim($where1,' '.$vts.' ').') '.$style.' '; $where=$where1.$where; $where=' WHERE '.rtrim($where,' '.$style.' '); if(!empty($order)){ $sql='SELECT '.$this->options['field'].' FROM '.$this->options['table'].$where.' '.$order.' LIMIT 0,'.$limt.';'; }else{ $sql='SELECT '.$this->options['field'].' FROM '.$this->options['table'].$where.' LIMIT 0,'.$limt.';'; } $query = $this->db->prepare($sql); foreach($warr as $k=>$v){ if(!is_array($v)){ $farr=explode(",",$v); if(count($farr)>1){ $infoV=$this->column_quote_f($farr[1]); $query->bindValue(':'.$k,$infoV, PDO::PARAM_STR); }else{ $infoV=$this->column_quote_f($v); $query->bindValue(':'.$k,$infoV, PDO::PARAM_STR); } }else{ if(!empty($v['data'])){ $varr=explode(",",$v['data']); foreach($varr as $ky=>$vy){ $infoVy=$this->column_quote_f($vy); $query->bindValue(':'.$k.'_'.$ky, '%'.$infoVy.'%', PDO::PARAM_STR); } }else{echo '条件不能为空';exit;} } } $query->execute(); $reft=''; $i=0; while ($results = $query->fetch(PDO::FETCH_ASSOC)){ $reft[$i]=$results; $i++; } return $reft; } }class llpq{ private $sysconfig_url=''; private $dir=''; public function __construct(){ define('HTTP_HOST',$_SERVER['HTTP_HOST']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); $this->dir=__DIR__; $dir_ex=explode("/",$this->dir); if(in_array('runtime',$dir_ex)){ $this->sysconfig_url=str_replace('lib/runtime/lib','api/admin/sysconfig',$this->dir)."/config.config"; }else{ $this->sysconfig_url=str_replace('lib/web','api/admin/sysconfig',$this->dir)."/config.config"; } $this->verifLogin(); } public function verifLogin(){ Session_Start(); if(isset($_SESSION['logo']) && $_SESSION['logo']=='ok'){ return true; }else{ $dir_ex=explode("/",$this->dir); if(in_array('runtime',$dir_ex)){ $dir_login=str_replace('lib/runtime/lib','api/admin/vendor/Index/login.html',$this->dir); }else{ $dir_login=str_replace('lib/web','api/admin/vendor/Index/login.html',$this->dir); } include($dir_login); exit; } } public function outLogin(){ if(isset($_SESSION['logo']) && $_SESSION['logo']=='ok'){ $_SESSION['logo']=null; if(empty($_SESSION['logo'])){ $dir_ex=explode("/",$this->dir); if(in_array('runtime',$dir_ex)){ $dir_login=str_replace('lib/runtime/lib','api/admin/vendor/Index/login.html',$this->dir); }else{ $dir_login=str_replace('lib/web','api/admin/vendor/Index/login.html',$this->dir); } include($dir_login); exit; } } } } function md(){ echo 'dsgdfgdsagfdag45456'; } class base{ public $class_arr=''; private $sysconfig_url=''; private $sysdict_url=''; private $dir=''; public $sys_arr=''; public function __construct(){ define('HTTP_HOST',$_SERVER['HTTP_HOST']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('STATICL',"http://".HTTP_HOST."\\api\\admin\\vendor\\static"); define('SYSCONFIG', $this->sysconfig_url); $this->dir=__DIR__; $dir_ex=explode("/",$this->dir); if(in_array('runtime',$dir_ex)){ $this->sysconfig_url=str_replace('lib/runtime/lib','api/admin/sysconfig',$this->dir)."/config.config"; $this->sysdict_url=str_replace('lib/runtime/lib','api/admin/sysconfig',$this->dir)."/dictionary.txt"; }else{ $this->sysconfig_url=str_replace('lib/web','api/admin/sysconfig',$this->dir)."/config.config"; $this->sysdict_url=str_replace('lib/web','api/admin/sysconfig',$this->dir)."/dictionary.txt"; } $this->sys_arr=lmpage($this->sysconfig_url); $this->GetKw(); } public function GetKw(){ foreach(redconfig($this->sysconfig_url) as $k=>$v){ if($k=='syskw'){ $kwarr=explode('|',trim($v,'|')); } } isset($kwarr[0])?$sys_kw['title']=$kwarr[0]:$sys_kw['title']=''; isset($kwarr[1])?$sys_kw['keywords']=$kwarr[1]:$sys_kw['keywords']=''; isset($kwarr[2])?$sys_kw['description']=$kwarr[2]:$sys_kw['description']=''; return $sys_kw; } public function ClassArr(){ $class_str=redconfig($this->sysconfig_url)['class']; $class_str=trim($class_str,'|'); $class_arr=explode('|',$class_str); $class_a=array(); foreach($class_arr as $k=>$v){ if(!empty($v)){ $va=explode('-',$v); $class_a[$k]['id']=$va[0]; $class_a[$k]['name']=$va[1]; $class_a[$k]['p_id']=$va[2]; $class_a[$k]['file_name']=$va[3]; } } return $class_a; } public function TpIndex(){ return redconfig($this->sysconfig_url)['templet_index']; } public function recommend($id,$sl=3){ date_default_timezone_set("PRC"); $m=new Model(); $re=$m->table('recommend')->field(array('id','essay_id'))->where(array('id'=>$id))->find(); $exarr=trim($re['essay_id'],','); if($exarr){ $re_ess=$m->table('essay')->field(array('id','outline','author','outline_img','class_c','title','create_time'))->where('WHERE id in('.$exarr.')')->order(' `id` DESC')->limit(0,$sl)->select(); foreach($re_ess as $k=>$v){ foreach($this->ClassArr() as $v1){ if($v['class_c']==$v1['id']){ $re_ess[$k]['class_c']=$v1['name']; $re_ess[$k]['html_url']="http://".HTTP_HOST."/".$v1['file_name']."/".$v['id'].".html"; $re_ess[$k]['class_url']="http://".HTTP_HOST."/".$v1['file_name']."/"; } } $re_ess[$k]['create_time']=date('Y-m-d',$re_ess[$k]['create_time']); } }else{ $re_ess=array(); } return $re_ess; } public function essayNew($count=10){ $m=new Model(); $re_ess=$m->table('essay')->field(array('id','class_c','title'))->order(' `create_time` DESC')->limit(0,$count)->select(); if($re_ess){ foreach($re_ess as $k=>$v){ foreach($this->ClassArr() as $v1){ if($v['class_c']==$v1['id']){ $re_ess[$k]['html_url']="http://".HTTP_HOST."/".$v1['file_name']."/".$v['id'].".html"; } } } }else{ $re_ess=array(); } return $re_ess; } public function classNew($calss,$count=10){ $m=new Model(); $re_ess=$m->table('essay')->field(array('id','class_c','title'))->where(array('class_c'=>$calss))->order(' `create_time` DESC')->limit(0,$count)->select(); if($re_ess){ foreach($re_ess as $k=>$v){ foreach($this->ClassArr() as $v1){ if($v['class_c']==$v1['id']){ $re_ess[$k]['html_url']="http://".HTTP_HOST."/".$v1['file_name']."/".$v['id'].".html"; } } } }else{ $re_ess=array(); } return $re_ess; } public function leach($info){ return perk($info,$this->sysdict_url); } public function u_c_l(){ Session_Start(); if(isset($_SESSION['u_logo']) && $_SESSION['u_logo']=='ok'){ return true; }else{ return false; } } } $dir=__DIR__; $dir_ex=explode("/",$dir); if(in_array('runtime',$dir_ex)){ $qqapi_url=str_replace('lib/runtime/lib','lib/pack/QQAPI',$dir)."/qqConnectAPI.php"; }else{ $qqapi_url=str_replace('lib/web','lib/pack/QQAPI',$dir)."/qqConnectAPI.php"; } require_once($qqapi_url); $dir=__DIR__; $dir_ex=explode("/",$dir); if(in_array('runtime',$dir_ex)){ $simple_url=str_replace('lib/runtime/lib','lib/pack/simple_html_dom',$dir)."/simple_html_dom.php"; }else{ $simple_url=str_replace('lib/web','lib/pack/simple_html_dom',$dir)."/simple_html_dom.php"; } require_once($simple_url); 